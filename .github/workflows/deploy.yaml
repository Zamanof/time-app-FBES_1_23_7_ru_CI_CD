name: CI/CD for time-app project

on:
  push:
    branches: ["main"]

env:
  REGISTRY: gchr.io
  IMAGE_NAME: ${{github.repository}}

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['20.19.3']
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4

      - name: Install Node.js ${{matrix.node-version}}
        uses: actions/setup-node@v4
        with:
          node-version: ${{matrix.node-version}}
      
      - name: API Dependency install
        working-directory: ./api
        run: npm install

        
      - name: Front Dependency install
        working-directory: ./frontend
        run: npm install
        
      - name: Run unit test
        working-directory: ./api
        run: npm test


  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest    

    strategy:
      matrix:
        node-version: ['20.19.3']
    
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4

      - name: Docker login
        run: echo "${{secrets.DOCKER_PASSWORD}}" | docker login -u "${{secrets.DOCKER_USERNAME}}" --password-stdin

      - name: API image build and push to docker-hub
        run: |
          docker build -t ${{secrets.DOCKER_USERNAME}}/time-app-api-fbes1237ru ./api
          docker push ${{secrets.DOCKER_USERNAME}}/time-app-api-fbes1237ru
        
      - name: Frontend image build and push to docker-hub
        run: |
          docker build -t ${{secrets.DOCKER_USERNAME}}/time-app-front-fbes1237ru ./frontend
          docker push ${{secrets.DOCKER_USERNAME}}/time-app-front-fbes1237ru

  deploy:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4
      
      - name: Azure Debian VM Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{secrets.AZURE_VM_HOST}}
          username: ${{secrets.AZURE_VM_USERNAME}}
          key: ${{secrets.AZURE_VM_SSH_KEY}}
          port: 22

          script: |
            if [ ! -d "/app/time-app"]; then
            sudo mkdir app
            cd app
            sudo mkdir time-app
            fi

            if [ ! -d "/app/time-app/.git"]; then
            sudo git clone http://github.com/${{github.repository}} /app/time-app
            fi

            cd /app/time-app
            sudo git pull origin main

            docker-compose pull
            docker-compose down
            docker-compose up -d

            docker image prune -f
